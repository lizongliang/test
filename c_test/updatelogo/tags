!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AML_RES_IMG_HEAD_SZ	res_pack.h	26;"	d
AML_RES_IMG_ITEM_ALIGN_SZ	res_pack.h	23;"	d
AML_RES_IMG_V1_MAGIC	res_pack.h	25;"	d
AML_RES_IMG_V1_MAGIC_LEN	res_pack.h	24;"	d
AML_RES_IMG_VERSION_V1	res_pack.h	29;"	d
AML_RES_IMG_VERSION_V2	res_pack.h	30;"	d
AML_RES_ITEM_HEAD_SZ	res_pack.h	27;"	d
AmlResImgHead_t	res_pack.h	/^}AmlResImgHead_t;$/;"	t	typeref:struct:__anon1
AmlResItemHead_t	res_pack.h	/^}AmlResItemHead_t;$/;"	t	typeref:struct:pack_header
BUFSIZE	crc32.cpp	9;"	d	file:
COMPILE_TYPE_CHK	res_pack.cpp	9;"	d	file:
CRC32_H_	crc32.h	9;"	d
EVENT_NUM	res_pack.cpp	669;"	d	file:
IH_MAGIC	res_pack.h	20;"	d
IH_NMLEN	res_pack.h	21;"	d
IMG_HEAD_SZ	res_pack.cpp	14;"	d	file:
ITEM_HEAD_SZ	res_pack.cpp	15;"	d	file:
ITEM_READ_BUF_SZ	res_pack.cpp	17;"	d	file:
LOCAL_MODULE	Android1.mk	/^LOCAL_MODULE := updatelogo$/;"	m
LOCAL_MODULE_TAGS	Android1.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android1.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_SRC_FILES	Android1.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOGE	res_pack.cpp	667;"	d	file:
LOGI	res_pack.cpp	666;"	d	file:
LOG_TAG	res_pack.cpp	665;"	d	file:
LOG_TAG	res_pack_i.h	46;"	d
MAX_PATH	res_pack_i.h	19;"	d
__COMMON_H	common.h	8;"	d
__IMGPACK_H__	res_pack.h	13;"	d
__RES_PACK_I_H__	res_pack_i.h	13;"	d
__hdle	res_pack_i.h	/^typedef void* __hdle;$/;"	t
__s32	res_pack.h	/^typedef signed int      __s32;$/;"	t
__s8	res_pack.h	/^typedef signed char     __s8;$/;"	t
__u32	res_pack.h	/^typedef unsigned int    __u32;$/;"	t
__u8	res_pack.h	/^typedef unsigned char   __u8;$/;"	t
_find_first_file	res_pack.cpp	/^static __hdle _find_first_file(const char* const dirPath, WIN32_FIND_DATA& findFileData)$/;"	f	file:
_img_pack	res_pack.cpp	/^static int _img_pack(const char** const path_src, const char* const packedImg, $/;"	f	file:
_img_unpack_check_img_header	res_pack.cpp	/^static int _img_unpack_check_img_header(FILE* fdResImg, const char* const path_src, $/;"	f	file:
_img_unpack_get_item_header	res_pack.cpp	/^static const AmlResItemHead_t* _img_unpack_get_item_header(const int imgVersion, const AmlResImgHead_t* pImgHead, int itemIndex, FILE* fdResImg)$/;"	f	file:
alignSz	res_pack.h	/^    __u32   alignSz;\/\/AML_RES_IMG_ITEM_ALIGN_SZ$/;"	m	struct:__anon1
calc_img_crc	crc32.cpp	/^unsigned calc_img_crc(FILE* fp, off_t offset, unsigned checkSz)$/;"	f
check_img_crc	crc32.cpp	/^int check_img_crc(FILE* fp, off_t offset, const unsigned orgCrc, unsigned checkSz\/* checkSz from offset *\/)$/;"	f
comp	res_pack.h	/^	unsigned char 	comp;	\/* Compression Type		*\/$/;"	m	struct:pack_header
crc	res_pack.h	/^    __u32   crc;    \/\/crc32 value for the resouces image$/;"	m	struct:__anon1
crc32	crc32.cpp	/^unsigned int crc32(unsigned int crc,unsigned char *buffer, unsigned int size)$/;"	f
crc_table	crc32.cpp	/^static unsigned int crc_table[256];$/;"	v	file:
dcrc	res_pack.h	/^	unsigned int	dcrc;	\/* Image Data CRC Checksum	*\/$/;"	m	struct:pack_header
debugP	res_pack_i.h	49;"	d
doc	res_pack.cpp	/^static const char * const doc = "Amlogic `imgpack v3' usage:\\n\\$/;"	v	file:
end	res_pack.h	/^	unsigned int	end;		\/* Entry Point Address		*\/$/;"	m	struct:pack_header
errorP	res_pack_i.h	50;"	d
event_str	res_pack.cpp	/^const char *event_str[EVENT_NUM] =$/;"	v
fseeko	res_pack_i.h	27;"	d
get_dir_filenums	res_pack.cpp	/^int get_dir_filenums(const char * const dirPath)$/;"	f
get_dir_filenums	res_pack.cpp	/^int get_dir_filenums(const char *dir_path)$/;"	f
get_file_path_from_argv	res_pack.cpp	/^int get_file_path_from_argv(const char** const argv, __hdle *hDir, char* fileName)$/;"	f
get_filename	res_pack.cpp	/^static  const char* get_filename(const char *fpath)$/;"	f	file:
get_filesize	res_pack.cpp	/^static size_t get_filesize(const char *fpath)$/;"	f	file:
get_last_itemname	res_pack.cpp	/^static char* get_last_itemname(const char* itemName)$/;"	f	file:
hcrc	res_pack.h	/^	unsigned int 	hcrc;	\/* Image Header CRC Checksum	*\/$/;"	m	struct:pack_header
imgItemNum	res_pack.h	/^    __u32   imgItemNum;\/\/total item packed in the image$/;"	m	struct:__anon1
imgSz	res_pack.h	/^    __u32   imgSz;  \/\/total image size in byte$/;"	m	struct:__anon1
index	res_pack.h	/^	unsigned char	index;		\/* Operating System		*\/$/;"	m	struct:pack_header
init_crc_table	crc32.cpp	/^static void init_crc_table(void)$/;"	f	file:
magic	res_pack.h	/^	unsigned int 	magic;	\/* Image Header Magic Number	*\/$/;"	m	struct:pack_header
magic	res_pack.h	/^    __u8    magic[AML_RES_IMG_V1_MAGIC_LEN];  \/\/resources images magic$/;"	m	struct:__anon1
main	res_pack.cpp	/^int main(int argc, char *argv[])$/;"	f
min	res_pack_i.h	20;"	d
name	res_pack.h	/^	char 	name[IH_NMLEN];	\/* Image Name		*\/$/;"	m	struct:pack_header
next	res_pack.h	/^	unsigned int	next;	\/* Next item head offset in the image*\/$/;"	m	struct:pack_header
nums	res_pack.h	/^	unsigned char	nums;	\/* CPU architecture		*\/$/;"	m	struct:pack_header
pFunc_getFile	res_pack.cpp	/^typedef int (*pFunc_getFile)(const char** const , __hdle *, char* );$/;"	t	file:
pack_header	res_pack.h	/^typedef struct pack_header{$/;"	s
pic_name	common.h	/^const char *pic_name = "boot0.bmp";$/;"	v
res_img_pack	res_pack.cpp	/^int res_img_pack(const char* szDir, const char* const outResImg)$/;"	f
res_img_unpack	res_pack.cpp	/^int res_img_unpack(const char* const path_src, const char* const unPackDirPath, int needCheckCrc)$/;"	f
reserv	res_pack.h	/^    __u8    reserv[AML_RES_IMG_HEAD_SZ - 8 * 3 - 4];$/;"	m	struct:__anon1
size	res_pack.h	/^	unsigned int	size;	\/* Image Data Size		*\/$/;"	m	struct:pack_header
start	res_pack.h	/^	unsigned int	start;	\/* item data offset in the image*\/$/;"	m	struct:pack_header
traverse_dir	res_pack.cpp	/^int traverse_dir(const char** const dirPath, __hdle *hDir, char* filePath)$/;"	f
traverse_dir	res_pack.cpp	/^int traverse_dir(const char** const dirPath, __hdle *hdle, char* filePath)$/;"	f
type	res_pack.h	/^	unsigned char   type;	\/* Image Type			*\/$/;"	m	struct:pack_header
updateUbootLogo	res_pack.cpp	/^int updateUbootLogo(const char* path){$/;"	f
version	res_pack.h	/^    __s32   version;\/\/0x01 means 'AmlResItemHead_t' attach to each item , 0x02 means all 'AmlResItemHead_t' at the head$/;"	m	struct:__anon1
